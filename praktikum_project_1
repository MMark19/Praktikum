#!/usr/bin/env python
# coding: utf-8


# Исследование надёжности заёмщиков
# 
# Заказчик — кредитный отдел банка. Нужно разобраться, влияет ли семейное положение и количество детей клиента на факт погашения кредита в срок. Входные данные от банка — статистика о платёжеспособности клиентов.

# Результаты исследования будут учтены при построении модели **кредитного скоринга** — специальной системы, которая оценивает способность потенциального заёмщика вернуть кредит банку.


# ### Шаг 1. Откройте файл с данными и изучите общую информацию. 

import pandas as pd
df = pd.read_csv('/datasets/data.csv')
df.info()

#Определяем есть ли пропущенные значения в данных
df.isna().mean()

#проверяем пропущенные значения
df[df['days_employed'].isnull()].head()


# ### Шаг 2. Предобработка данных

# ### Обработка пропусков

#обработаем отрицательные значения встолбце стаж c помощью функции
def days_employed(days):
    if days < 0:
        return days*(-1)
    return days

df['days_employed'] = df['days_employed'].apply(days_employed)


#Заменим пропущенные данные на средее значение в категории.Найдем среднее значение трудового стажа
days_employed_avg = df['days_employed'].mean()
days_employed_avg

# Заменим пропуски на среднее значение. Ввыедем на экран
df['days_employed'] = df['days_employed'].fillna(value=days_employed_avg)

#Посмотри на разброс данных в колонке 'total_income'
df['total_income'].describe()


#Отличия между минимальным и максимальным значениям не критичниы, поэтому также заменим пропущнные значения на среднее.
total_income_avg = df['total_income'].mean()
df['total_income'] = df['total_income'].fillna(value=total_income_avg)


# Мы заменили пропуски на среднее значение в каждой категории чтобы можно было в дальнейшем производить необходимые расчеты.

# ### Замена типа данных

#Заменим вещественный тип данных на целочисленный. Столбец 'days_employed' и total_income переведем в челочисленный тип способом методом int 
#так как на данный момент формат данных этоих столбцов имеют тип Float

df['days_employed'] = df['days_employed'].astype('int')
df['total_income'] = df['total_income'].astype('int')


# ### Вывод

# Заменили тип данных для возможности в дальнейшем производить необходимые расчеты в нужном формате для категорий

# ### Обработка дубликатов

#Сначала узнаем сколько у нас дубликатов в таблице
df.duplicated().sum()


#Далее найтем в каких столбцах встречаются дубликаты методом duplicated
df[df.duplicated(keep ='first')].head(10)


# ### Вывод

# Мы видим, что нам показываются дубликаты средних значений которые мы добавили вместо пустых значений на предыдущем шагe, в остальных столбцах повторяются значения так как они являются одним из видов категории, поэтому удалять дубликаты из таблицы не будем так как это приведет к бессмысленности предыдущих шагов по замене пустых значений.

# ### Лемматизация


#Проведем лемматизацию для выявления наиболее популярной цели кредита и создадим новый столбец lemmas куда выведем результат лемматизации
from pymystem3 import Mystem
from collections import Counter
m = Mystem()

df['lemmas'] = df.purpose.apply(m.lemmatize)

#Отсортируеи и узнаем частотность каждого упоминания
Counter(m.lemmatize(' '.join(df['purpose']))).most_common()

#Обрадотаем через функцию и приведем к общему виду столбец lemmas
def lemmas (a):
    if 'автомобиль' in a:
        return "автомобиль"
    if 'образование' in a :
        return "образование"
    if 'свадьба' in a:
        return "свадьба"
    if 'строительство' in a:
        return "строительство"
    if 'ремонт' in a:
        return "ремонт"
    if 'жилье' in a or 'недвижимость' in a:
        return "недвижимость"
    return "другое"

#Применим функцию к столбцу lemmas и создадим столбец lemmas_group
df['lemmas_group'] = df['lemmas'].apply(lemmas)

df['lemmas_group'].value_counts()


# ### Вывод

# Самыми популярными целями являются Недвижимость, Покупка автомобиля и образование.

# ### Категоризация данных

#Приведем данные в один формат написания в столбце education. 
#Плюс добавим три категории для ответов на вопросы ниже: 'children_group', 'debt_group' , 'income_group'


#Приведем данные в один формат написания в столбце education.
df['education'] = df['education'].str.lower()

#Напишем функцию которая будет определять наличие детей
def child (child):
    if child == 0:
        return "Нет детей"
    return "Есть дети"
# Применим ее к нашему столбцу children и сформируем новый столбец children_group
df['children_group'] = df['children'].apply(child)

#Вывелем статистику по группе
df['children_group'].value_counts()

# Также напишем функцию которая будет определять наличие задолжностей
def income (a):
    if a <=200000:
        return "Низкий"
    if a <=500000:
        return "Средний"
    return "Высокий"
#Применим ее к столбцу 'total_income' и сформируем новый столбец 'income_group'
df['income_group'] = df['total_income'].apply(income)


#Вывелем статистику по группе
df['income_group'].value_counts()


# Также напишем функцию которая будет определять наличие задолжностей
def debt (a):
    if a == 1:
        return "Была задолженность"
    return "Не было задолженности"
#Применим ее к столбцу debt и сформируем новый столбец debt_group
df['debt_group'] = df['debt'].apply(debt)


#Вывелем статистику по группе
df['debt_group'].value_counts()

# ### Вывод

# Видим что у преобладающей части заемщиков нет детей, низкий уровень дохода и была просрочка возврата по кредиту.

# ### Шаг 3. Ответьте на вопросы

# - Есть ли зависимость между наличием детей и возвратом кредита в срок?

#Для ответа на этот вопрос необходимо построить сводную таблицу и вывести необходимые для определения зависимости столбцы.
#Создадим таблицу с нужными столбцами
df_pivot = df[['children_group','debt_group','debt']]


#Cоздадим сводную из новой таблицы чтобы выяснить зависимость наличия дедей и возврата кредит в срок
df_pivot.pivot_table(values ='debt', index='children_group', columns='debt_group', aggfunc='count')


df.groupby('children_group')['debt'].sum() / df.groupby('children_group')['debt'].count() * 100

# ### Вывод

# Вероятность заемщикам с детьми стать должниками примерно на 2% выше, чем у заемщиков без детей

#Создадим новую таблицу со столбцами family_status, family_status_id, debt_group
df_pivot_step2 = df[['family_status','debt_group','family_status_id']]
#выведем сводную для выявления зависимости
df_pivot_step2.pivot_table(values ='family_status_id', index='family_status', columns='debt_group', aggfunc='count')

df_family = df.groupby('family_status')['debt'].sum() / df.groupby('family_status')['debt'].count()*100

df_family.sort_values(ascending=False)


# Можно сделать вывод что у заемщиков с семейным положением 'не женат /не замужем' и 'гражданский брак' вероятность стать должником составиляет 9%, что больше, чем у остальных групп

# - Есть ли зависимость между уровнем дохода и возвратом кредита в срок?

#Создадим новую таблицу со столбцами total_income, income_group, debt_group
df_pivot_step3 = df[['total_income','debt_group','income_group']]
#выведем сводную для выявления зависимости
df_pivot_step3.pivot_table(values ='total_income', index='income_group', columns='debt_group', aggfunc='count')

df_income = df.groupby('income_group')['debt'].sum() / df.groupby('income_group')['debt'].count()*100


df_income.sort_values(ascending=False)


# ### Вывод

# Вероятность стать должником у заемщиков с низким доходом выше, чем у остальных групп.
# Из сводной таблицы видно, что у заемщиков с низким доходом чаще была задолженность по возврату кредита.

# - Как разные цели кредита влияют на его возврат в срок?

#Создадим новую таблицу со столбцами lemmas_group, debt, debt_group
df_pivot_step4 = df[['lemmas_group','debt_group','debt']]
#выведем сводную для выявления зависимости
df_pivot_step4.pivot_table(values ='debt', index='lemmas_group', columns='debt_group', aggfunc='count')

df_lemmas = df.groupby('lemmas_group')['debt'].sum() / df.groupby('lemmas_group')['debt'].count()*100

df_lemmas.sort_values(ascending=False)

# ### Вывод

# Вероятность стать должниками у заемщиков с целью 'образование' и 'автомобиль' выше, чем в других группах.

# ### Шаг 4. Общий вывод

# Общий вывод: Чаще проблемы с возвратом может возникнуть у заемщиков с детьми, с низким доходом, холостых или в гражданском браке, с целью покупки автомобиля или образования. Примерно всего около 10% не имело задолженности в каждой группе child_groip, также % заемщиков без задолженностей варьируется всего в районе 6-10% от общей группы в каждой категории в разрезе доходов. Также влияет цель займа на возврат в срок в зависимости от ее стоимости и соответственно времени рассрочки.

